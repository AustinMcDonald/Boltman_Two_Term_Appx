import numpy as np



def a_ell(ell):
    if (( float(ell).is_integer() == False) or (ell==0)):
        print("quantum numner l violation")
        return None
    
    holder = np.pi/((2*ell+3)*(2*ell+1)*(2*ell-1))
    return holder

def b_ell(ell):
    if (( float(ell).is_integer() == False) or (ell==0)):
        print("quantum numner l violation")
        return None
    
    holder1 = np.pi*(15*(2*ell+1)**4 - 140*(2*ell+1)**2+128)
    holder2 = ((2*ell+3)*(2*ell+1)*(2*ell-1))**3*(2*ell+5)*(2*ell-3)
    holder = holder1/holder2
    return holder

def c_ell(ell):
    if (( float(ell).is_integer() == False) or (ell==0)):
        print("quantum numner l violation")
        return None
    
    holder = (3*a_ell(ell))/((2*ell+5)*(2*ell-3))
    return holder

def Zeroth_Phase_Shift(Obj):
    con = (Obj.alpha_d*Obj.k**2)/(3*Obj.alpha_0)
    holder1 = -1*Obj.A*Obj.k*(1+4*con*np.log(Obj.k*Obj.alpha_0))-np.pi*con+Obj.D*Obj.k**3+Obj.F*Obj.k**4
    holder2 = 1 + Obj.G*Obj.k**3
    holder = np.arctan(holder1/holder2)
    return holder

def First_Phase_Shift(Obj):
    holder1 = Obj.a_1*Obj.alpha_d*Obj.k**2 - Obj.A1*Obj.k**3 + (Obj.b_1*Obj.alpha_d**2+Obj.c_1*Obj.alpha_q)*Obj.k**4 + Obj.H*Obj.k**5
    holder = np.arctan(holder1)
    return holder

def Second_Phase_Shift(Obj):
    holder1 = Obj.a_2*Obj.alpha_d*Obj.k**2 + (Obj.b_2*Obj.alpha_d**2+Obj.c_2*Obj.alpha_q)*Obj.k**4 + Obj.A2*Obj.k**5
    holder = np.arctan(holder1)
    return holder

def Q_MT(Obj):
    con = 4*np.pi/Obj.k**2
    eta0 = Zeroth_Phase_Shift(Obj)
    eta1 = First_Phase_Shift(Obj)
    eta2 = Second_Phase_Shift(Obj)
    
    holder = con*(np.sin(eta0 - eta1)**2 + 2*np.sin(eta1 - eta2)**2)*(5.29e-11)**2*1e20
    holder[0] = 1.31000000e+02
    return holder
    
def Q_T(Obj):
    con = 4*np.pi/Obj.k**2
    eta0 = Zeroth_Phase_Shift(Obj)
    eta1 = First_Phase_Shift(Obj)
    eta2 = Second_Phase_Shift(Obj)
    
    holder = con*(np.sin(eta0)**2 + 3*np.sin(eta1)**2 + 5*np.sin(eta2)**2)*(5.29e-11)**2*1e20
    holder[0] = 1.31000000e+02
    return holder

def WEIGHT_Q(eV, Qm, Qm_Orginal, Lamda, eV0):
    Weight_MERT  = (1-np.tanh(Lamda*(eV-eV0)))/2
    Weight_Original  = (1+np.tanh(Lamda*(eV-eV0)))/2
    
    NewQm = Qm_Orginal*Weight_Original
    NewMERTQm = Qm*Weight_MERT
    NewQm = NewQm+NewMERTQm
    return NewQm

class MERT_6_PLUS:
    def __init__(self):
        """
        Fill the empty variables. 
        """
        self.A  = 0
        self.D  = 0
        self.F  = 0
        self.G  = 0
        self.A1 = 0
        self.H  = 0
        self.A2 = 0

        self.a_1 = a_ell(1)
        self.a_2 = a_ell(2)
        self.b_1 = b_ell(1)
        self.b_2 = b_ell(2)
        self.c_1 = c_ell(1)
        self.c_2 = c_ell(2)

        self.alpha_0 = 1#5.291e-11 # bohr radium in m
        self.alpha_d = 27.29*self.alpha_0**3 
        self.alpha_q = 16.8*self.alpha_0**5

        self.k = np.array([])


Qm_Xe = np.array([1.31000000e+02, 1.15000000e+02, 9.70000000e+01, 9.10999985e+01,
       8.39000015e+01, 7.45999985e+01, 6.73000031e+01, 6.12000008e+01,
       5.60999985e+01, 4.79000015e+01, 4.14000015e+01, 3.62000008e+01,
       3.17999992e+01, 2.82000008e+01, 2.25000000e+01, 1.81000004e+01,
       1.48000002e+01, 1.11000004e+01, 8.35999966e+00, 5.32999992e+00,
       4.46999979e+00, 3.43000007e+00, 2.88000011e+00, 2.22000003e+00,
       1.86000001e+00, 1.42999995e+00, 1.20000005e+00, 1.00999999e+00,
       8.43999982e-01, 7.08000004e-01, 5.96000016e-01, 5.47999978e-01,
       5.04000008e-01, 4.65000004e-01, 4.30000007e-01, 3.98999989e-01,
       3.72000009e-01, 3.47999990e-01, 3.28000009e-01, 3.10000002e-01,
       2.96000004e-01, 2.84999996e-01, 2.75999993e-01, 2.70000011e-01,
       2.66000003e-01, 2.64999986e-01, 2.66000003e-01, 2.70000011e-01,
       2.75999993e-01, 2.87000000e-01, 3.05999994e-01, 3.40999991e-01,
       3.77000004e-01, 4.26999986e-01, 4.79000002e-01, 5.61999977e-01,
       6.51000023e-01, 7.13000000e-01, 7.77999997e-01, 8.79999995e-01,
       1.25999999e+00, 1.62000000e+00, 1.91999996e+00, 2.25000000e+00,
       2.84999990e+00, 3.50999999e+00, 4.21999979e+00, 5.73000002e+00,
       7.96999979e+00, 1.18000002e+01, 1.58000002e+01, 2.03999996e+01,
       2.43999996e+01, 2.80000000e+01, 3.07000008e+01, 3.15000000e+01,
       3.22999992e+01, 3.16000004e+01, 3.10000000e+01, 2.77999992e+01,
       2.35000000e+01, 1.97999992e+01, 1.50000000e+01, 1.08999996e+01,
       8.39999962e+00, 7.25000000e+00, 5.65000010e+00, 5.00000000e+00,
       4.50000000e+00, 3.09999990e+00, 2.42000008e+00, 2.17000008e+00,
       2.00000000e+00, 1.88999999e+00, 1.79999995e+00, 1.73000002e+00,
       1.64999998e+00, 1.50000000e+00, 1.38999999e+00, 1.25999999e+00,
       1.09000003e+00, 9.39999998e-01, 8.39999974e-01, 7.50000000e-01,
       6.80000007e-01, 5.60000002e-01, 3.79999995e-01, 2.59999990e-01,
       1.55000001e-01, 1.04999997e-01, 7.59999976e-02, 5.90000004e-02,
       3.79999988e-02, 2.70000007e-02, 1.48000000e-02, 9.39999986e-03,
       4.99999989e-03, 3.10000009e-03, 2.19999999e-03, 1.62999996e-03,
       1.02400000e-03, 7.14000023e-04, 4.98000009e-04, 3.72000010e-04,
       2.91000004e-04, 2.36000007e-04, 1.65999998e-04, 1.25000006e-04,
       9.90000000e-05, 8.08000000e-05, 6.76000000e-05, 5.77000000e-05,
       4.38000000e-05, 3.48000000e-05, 2.85000000e-05, 2.39000000e-05,
       2.04000000e-05, 1.43000000e-05, 1.08000000e-05, 8.52000000e-06,
       6.91000000e-06, 4.85000000e-06, 3.62000000e-06, 2.81000000e-06,
       2.25000000e-06, 1.85000000e-06, 1.55000000e-06, 1.13000000e-06,
       8.67000000e-07, 6.86000000e-07, 5.58000000e-07, 4.63000000e-07,
       3.10000000e-07, 2.23000000e-07, 1.68000000e-07, 1.31000000e-07,
       8.64000000e-08, 6.11000000e-08, 4.54000000e-08, 3.51000000e-08,
       2.78000000e-08, 2.26000000e-08, 1.57000000e-08, 1.15000000e-08,
       8.79000000e-09, 6.93000000e-09, 5.60000000e-09, 3.57000000e-09,
       2.47000000e-09, 1.81000000e-09, 1.38000000e-09, 8.82000000e-10,
       6.11000000e-10, 4.48000000e-10, 3.43000000e-10, 2.71000000e-10,
       2.19000000e-10, 1.52000000e-10, 1.12000000e-10, 8.55000000e-11,
       6.75000000e-11, 5.47000000e-11])
e_Xe  = np.array([0.00000000e+00, 1.00000005e-03, 4.99999989e-03, 7.00000022e-03,
       9.99999978e-03, 1.49999997e-02, 1.99999996e-02, 2.50000004e-02,
       2.99999993e-02, 3.99999991e-02, 5.00000007e-02, 5.99999987e-02,
       7.00000003e-02, 7.99999982e-02, 1.00000001e-01, 1.19999997e-01,
       1.40000001e-01, 1.70000002e-01, 2.00000003e-01, 2.50000000e-01,
       2.70000011e-01, 3.00000012e-01, 3.19999993e-01, 3.49999994e-01,
       3.70000005e-01, 4.00000006e-01, 4.19999987e-01, 4.39999998e-01,
       4.60000008e-01, 4.79999989e-01, 5.00000000e-01, 5.09999990e-01,
       5.19999981e-01, 5.29999971e-01, 5.40000021e-01, 5.50000012e-01,
       5.60000002e-01, 5.69999993e-01, 5.79999983e-01, 5.89999974e-01,
       6.00000024e-01, 6.10000014e-01, 6.20000005e-01, 6.29999995e-01,
       6.39999986e-01, 6.49999976e-01, 6.60000026e-01, 6.70000017e-01,
       6.80000007e-01, 6.89999998e-01, 6.99999988e-01, 7.14999974e-01,
       7.30000019e-01, 7.50000000e-01, 7.69999981e-01, 8.00000012e-01,
       8.29999983e-01, 8.50000024e-01, 8.70000005e-01, 8.99999976e-01,
       1.00000000e+00, 1.08000004e+00, 1.13999999e+00, 1.20000005e+00,
       1.29999995e+00, 1.39999998e+00, 1.50000000e+00, 1.70000005e+00,
       2.00000000e+00, 2.50000000e+00, 3.00000000e+00, 3.50000000e+00,
       4.00000000e+00, 4.50000000e+00, 5.00000000e+00, 5.50000000e+00,
       6.00000000e+00, 6.50000000e+00, 7.00000000e+00, 8.00000000e+00,
       9.00000000e+00, 1.00000000e+01, 1.20000000e+01, 1.50000000e+01,
       1.80000000e+01, 2.00000000e+01, 2.50000000e+01, 3.00000000e+01,
       4.00000000e+01, 5.00000000e+01, 6.00000000e+01, 7.00000000e+01,
       8.00000000e+01, 9.00000000e+01, 1.00000000e+02, 1.25000000e+02,
       1.50000000e+02, 2.00000000e+02, 2.50000000e+02, 3.00000000e+02,
       4.00000000e+02, 5.00000000e+02, 6.00000000e+02, 7.00000000e+02,
       8.00000000e+02, 1.00000000e+03, 1.50000000e+03, 2.00000000e+03,
       3.00000000e+03, 4.00000000e+03, 5.00000000e+03, 6.00000000e+03,
       8.00000000e+03, 1.00000000e+04, 1.50000000e+04, 2.00000000e+04,
       3.00000000e+04, 4.00000000e+04, 5.00000000e+04, 6.00000000e+04,
       8.00000000e+04, 1.00000000e+05, 1.25000000e+05, 1.50000000e+05,
       1.75000000e+05, 2.00000000e+05, 2.50000000e+05, 3.00000000e+05,
       3.50000000e+05, 4.00000000e+05, 4.50000000e+05, 5.00000000e+05,
       6.00000000e+05, 7.00000000e+05, 8.00000000e+05, 9.00000000e+05,
       1.00000000e+06, 1.25000000e+06, 1.50000000e+06, 1.75000000e+06,
       2.00000000e+06, 2.50000000e+06, 3.00000000e+06, 3.50000000e+06,
       4.00000000e+06, 4.50000000e+06, 5.00000000e+06, 6.00000000e+06,
       7.00000000e+06, 8.00000000e+06, 9.00000000e+06, 1.00000000e+07,
       1.25000000e+07, 1.50000000e+07, 1.75000000e+07, 2.00000000e+07,
       2.50000000e+07, 3.00000000e+07, 3.50000000e+07, 4.00000000e+07,
       4.50000000e+07, 5.00000000e+07, 6.00000000e+07, 7.00000000e+07,
       8.00000000e+07, 9.00000000e+07, 1.00000000e+08, 1.25000000e+08,
       1.50000000e+08, 1.75000000e+08, 2.00000000e+08, 2.50000000e+08,
       3.00000000e+08, 3.50000000e+08, 4.00000000e+08, 4.50000000e+08,
       5.00000000e+08, 6.00000000e+08, 7.00000000e+08, 8.00000000e+08,
       9.00000000e+08, 1.00000000e+09])